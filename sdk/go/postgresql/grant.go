// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The ``Grant`` resource creates and manages privileges given to a user for a database schema.
//
// See [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-grant.html)
//
// > **Note:** This resource needs Postgresql version 9 or above.
//
// ## Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-postgresql/sdk/v2/go/postgresql/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := postgresql.NewGrant(ctx, "readonlyTables", &postgresql.GrantArgs{
// 			Database:   pulumi.String("test_db"),
// 			ObjectType: pulumi.String("table"),
// 			Privileges: pulumi.StringArray{
// 				pulumi.String("SELECT"),
// 			},
// 			Role:   pulumi.String("test_role"),
// 			Schema: pulumi.String("public"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Examples
//
// Revoke default accesses for public schema:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-postgresql/sdk/v2/go/postgresql/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := postgresql.NewGrant(ctx, "revokePublic", &postgresql.GrantArgs{
// 			Database:   pulumi.String("test_db"),
// 			ObjectType: pulumi.String("schema"),
// 			Privileges: []interface{}{},
// 			Role:       pulumi.String("public"),
// 			Schema:     pulumi.String("public"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Grant struct {
	pulumi.CustomResourceState

	// The database to grant privileges on for this role.
	Database pulumi.StringOutput `pulumi:"database"`
	// The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence,function).
	ObjectType pulumi.StringOutput `pulumi:"objectType"`
	// The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.
	Privileges pulumi.StringArrayOutput `pulumi:"privileges"`
	// The name of the role to grant privileges on, Set it to "public" for all roles.
	Role pulumi.StringOutput `pulumi:"role"`
	// The database schema to grant privileges on for this role (Required except if objectType is "database")
	Schema pulumi.StringPtrOutput `pulumi:"schema"`
	// Permit the grant recipient to grant it to others
	WithGrantOption pulumi.BoolPtrOutput `pulumi:"withGrantOption"`
}

// NewGrant registers a new resource with the given unique name, arguments, and options.
func NewGrant(ctx *pulumi.Context,
	name string, args *GrantArgs, opts ...pulumi.ResourceOption) (*Grant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.ObjectType == nil {
		return nil, errors.New("invalid value for required argument 'ObjectType'")
	}
	if args.Privileges == nil {
		return nil, errors.New("invalid value for required argument 'Privileges'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource Grant
	err := ctx.RegisterResource("postgresql:index/grant:Grant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrant gets an existing Grant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantState, opts ...pulumi.ResourceOption) (*Grant, error) {
	var resource Grant
	err := ctx.ReadResource("postgresql:index/grant:Grant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Grant resources.
type grantState struct {
	// The database to grant privileges on for this role.
	Database *string `pulumi:"database"`
	// The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence,function).
	ObjectType *string `pulumi:"objectType"`
	// The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.
	Privileges []string `pulumi:"privileges"`
	// The name of the role to grant privileges on, Set it to "public" for all roles.
	Role *string `pulumi:"role"`
	// The database schema to grant privileges on for this role (Required except if objectType is "database")
	Schema *string `pulumi:"schema"`
	// Permit the grant recipient to grant it to others
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

type GrantState struct {
	// The database to grant privileges on for this role.
	Database pulumi.StringPtrInput
	// The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence,function).
	ObjectType pulumi.StringPtrInput
	// The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.
	Privileges pulumi.StringArrayInput
	// The name of the role to grant privileges on, Set it to "public" for all roles.
	Role pulumi.StringPtrInput
	// The database schema to grant privileges on for this role (Required except if objectType is "database")
	Schema pulumi.StringPtrInput
	// Permit the grant recipient to grant it to others
	WithGrantOption pulumi.BoolPtrInput
}

func (GrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantState)(nil)).Elem()
}

type grantArgs struct {
	// The database to grant privileges on for this role.
	Database string `pulumi:"database"`
	// The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence,function).
	ObjectType string `pulumi:"objectType"`
	// The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.
	Privileges []string `pulumi:"privileges"`
	// The name of the role to grant privileges on, Set it to "public" for all roles.
	Role string `pulumi:"role"`
	// The database schema to grant privileges on for this role (Required except if objectType is "database")
	Schema *string `pulumi:"schema"`
	// Permit the grant recipient to grant it to others
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

// The set of arguments for constructing a Grant resource.
type GrantArgs struct {
	// The database to grant privileges on for this role.
	Database pulumi.StringInput
	// The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence,function).
	ObjectType pulumi.StringInput
	// The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.
	Privileges pulumi.StringArrayInput
	// The name of the role to grant privileges on, Set it to "public" for all roles.
	Role pulumi.StringInput
	// The database schema to grant privileges on for this role (Required except if objectType is "database")
	Schema pulumi.StringPtrInput
	// Permit the grant recipient to grant it to others
	WithGrantOption pulumi.BoolPtrInput
}

func (GrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantArgs)(nil)).Elem()
}

type GrantInput interface {
	pulumi.Input

	ToGrantOutput() GrantOutput
	ToGrantOutputWithContext(ctx context.Context) GrantOutput
}

func (*Grant) ElementType() reflect.Type {
	return reflect.TypeOf((*Grant)(nil))
}

func (i *Grant) ToGrantOutput() GrantOutput {
	return i.ToGrantOutputWithContext(context.Background())
}

func (i *Grant) ToGrantOutputWithContext(ctx context.Context) GrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantOutput)
}

type GrantOutput struct {
	*pulumi.OutputState
}

func (GrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Grant)(nil))
}

func (o GrantOutput) ToGrantOutput() GrantOutput {
	return o
}

func (o GrantOutput) ToGrantOutputWithContext(ctx context.Context) GrantOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GrantOutput{})
}
