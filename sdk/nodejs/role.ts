// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The ``postgresql_role`` resource creates and manages a role on a PostgreSQL
 * server.
 * 
 * When a ``postgresql_role`` resource is removed, the PostgreSQL ROLE will
 * automatically run a [`REASSIGN
 * OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html)
 * and [`DROP
 * OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html) to
 * the `CURRENT_USER` (normally the connected user for the provider).  If the
 * specified PostgreSQL ROLE owns objects in multiple PostgreSQL databases in the
 * same PostgreSQL Cluster, one PostgreSQL provider per database must be created
 * and all but the final ``postgresql_role`` must specify a `skip_drop_role`.
 * 
 * > **Note:** All arguments including role name and password will be stored in the raw state as plain-text.
 * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 * 
 * ## Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as postgresql from "@pulumi/postgresql";
 * 
 * const myReplicationRole = new postgresql.Role("my_replication_role", {
 *     connectionLimit: 5,
 *     login: true,
 *     password: "md5c98cbfeb6a347a47eb8e96cfb4c4b890",
 *     replication: true,
 * });
 * const myRole = new postgresql.Role("my_role", {
 *     login: true,
 *     password: "mypass",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-postgresql/blob/master/website/docs/r/role.html.markdown.
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     */
    public readonly bypassRowLevelSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     */
    public readonly connectionLimit!: pulumi.Output<number | undefined>;
    /**
     * Defines a role's ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     */
    public readonly createDatabase!: pulumi.Output<boolean | undefined>;
    /**
     * Defines a role's ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     */
    public readonly createRole!: pulumi.Output<boolean | undefined>;
    public readonly encrypted!: pulumi.Output<string | undefined>;
    /**
     * Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     */
    public readonly encryptedPassword!: pulumi.Output<boolean | undefined>;
    /**
     * Defines whether a role "inherits" the privileges of
     * roles it is a member of.  Default value is `true`.
     */
    public readonly inherit!: pulumi.Output<boolean | undefined>;
    /**
     * Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     */
    public readonly login!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sets the role's password. A password is only of use
     * for roles having the `login` attribute set to true.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     */
    public readonly replication!: pulumi.Output<boolean | undefined>;
    /**
     * Defines list of roles which will be granted to this new role.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     */
    public readonly skipDropRole!: pulumi.Output<boolean | undefined>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to dropped the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     */
    public readonly skipReassignOwned!: pulumi.Output<boolean | undefined>;
    /**
     * Defines whether the role is a "superuser", and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     */
    public readonly superuser!: pulumi.Output<boolean | undefined>;
    /**
     * Defines the date and time after which the role's
     * password is no longer valid.  Established connections past this `valid_time`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `valid_until` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     */
    public readonly validUntil!: pulumi.Output<string | undefined>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RoleState | undefined;
            inputs["bypassRowLevelSecurity"] = state ? state.bypassRowLevelSecurity : undefined;
            inputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            inputs["createDatabase"] = state ? state.createDatabase : undefined;
            inputs["createRole"] = state ? state.createRole : undefined;
            inputs["encrypted"] = state ? state.encrypted : undefined;
            inputs["encryptedPassword"] = state ? state.encryptedPassword : undefined;
            inputs["inherit"] = state ? state.inherit : undefined;
            inputs["login"] = state ? state.login : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["replication"] = state ? state.replication : undefined;
            inputs["roles"] = state ? state.roles : undefined;
            inputs["skipDropRole"] = state ? state.skipDropRole : undefined;
            inputs["skipReassignOwned"] = state ? state.skipReassignOwned : undefined;
            inputs["superuser"] = state ? state.superuser : undefined;
            inputs["validUntil"] = state ? state.validUntil : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            inputs["bypassRowLevelSecurity"] = args ? args.bypassRowLevelSecurity : undefined;
            inputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            inputs["createDatabase"] = args ? args.createDatabase : undefined;
            inputs["createRole"] = args ? args.createRole : undefined;
            inputs["encrypted"] = args ? args.encrypted : undefined;
            inputs["encryptedPassword"] = args ? args.encryptedPassword : undefined;
            inputs["inherit"] = args ? args.inherit : undefined;
            inputs["login"] = args ? args.login : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["replication"] = args ? args.replication : undefined;
            inputs["roles"] = args ? args.roles : undefined;
            inputs["skipDropRole"] = args ? args.skipDropRole : undefined;
            inputs["skipReassignOwned"] = args ? args.skipReassignOwned : undefined;
            inputs["superuser"] = args ? args.superuser : undefined;
            inputs["validUntil"] = args ? args.validUntil : undefined;
        }
        super(Role.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     */
    readonly bypassRowLevelSecurity?: pulumi.Input<boolean>;
    /**
     * If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     */
    readonly connectionLimit?: pulumi.Input<number>;
    /**
     * Defines a role's ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     */
    readonly createDatabase?: pulumi.Input<boolean>;
    /**
     * Defines a role's ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     */
    readonly createRole?: pulumi.Input<boolean>;
    readonly encrypted?: pulumi.Input<string>;
    /**
     * Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     */
    readonly encryptedPassword?: pulumi.Input<boolean>;
    /**
     * Defines whether a role "inherits" the privileges of
     * roles it is a member of.  Default value is `true`.
     */
    readonly inherit?: pulumi.Input<boolean>;
    /**
     * Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     */
    readonly login?: pulumi.Input<boolean>;
    /**
     * The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Sets the role's password. A password is only of use
     * for roles having the `login` attribute set to true.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     */
    readonly replication?: pulumi.Input<boolean>;
    /**
     * Defines list of roles which will be granted to this new role.
     */
    readonly roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     */
    readonly skipDropRole?: pulumi.Input<boolean>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to dropped the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     */
    readonly skipReassignOwned?: pulumi.Input<boolean>;
    /**
     * Defines whether the role is a "superuser", and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     */
    readonly superuser?: pulumi.Input<boolean>;
    /**
     * Defines the date and time after which the role's
     * password is no longer valid.  Established connections past this `valid_time`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `valid_until` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     */
    readonly validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     */
    readonly bypassRowLevelSecurity?: pulumi.Input<boolean>;
    /**
     * If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     */
    readonly connectionLimit?: pulumi.Input<number>;
    /**
     * Defines a role's ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     */
    readonly createDatabase?: pulumi.Input<boolean>;
    /**
     * Defines a role's ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     */
    readonly createRole?: pulumi.Input<boolean>;
    readonly encrypted?: pulumi.Input<string>;
    /**
     * Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     */
    readonly encryptedPassword?: pulumi.Input<boolean>;
    /**
     * Defines whether a role "inherits" the privileges of
     * roles it is a member of.  Default value is `true`.
     */
    readonly inherit?: pulumi.Input<boolean>;
    /**
     * Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     */
    readonly login?: pulumi.Input<boolean>;
    /**
     * The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Sets the role's password. A password is only of use
     * for roles having the `login` attribute set to true.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     */
    readonly replication?: pulumi.Input<boolean>;
    /**
     * Defines list of roles which will be granted to this new role.
     */
    readonly roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     */
    readonly skipDropRole?: pulumi.Input<boolean>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to dropped the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     */
    readonly skipReassignOwned?: pulumi.Input<boolean>;
    /**
     * Defines whether the role is a "superuser", and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     */
    readonly superuser?: pulumi.Input<boolean>;
    /**
     * Defines the date and time after which the role's
     * password is no longer valid.  Established connections past this `valid_time`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `valid_until` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     */
    readonly validUntil?: pulumi.Input<string>;
}
